package com.employeeManagement.service.payloads;

import java.util.Date;

import com.employeeManagement.service.validation.Age;
import com.employeeManagement.service.validation.BirthDate;

import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@NoArgsConstructor
@Getter
@Setter
public class PersonalDTO {
	
	private long pid;
 
	@NotEmpty
//	@Size(min = 4,message = "First Name must be min of 4 characters!")
	@Pattern(regexp = "^[a-zA-Z]{2,12}$",message = "Incorrect lastname,Only 2-12 letters are allowed!")
	private String firstName;
	@Pattern(regexp = "^([a-zA-Z]{2,12})$|^()$",message = "Incorrest lastname,Only 2-12 letters or blank value is allowed!")
	private String secondName;
	@Pattern(regexp = "^[a-zA-Z]{2,12}$",message = "Incorrect lastname,can be 2-12 letters only")
	private String lastName;
//	@Pattern(regexp = "^([1-9]{1}[0-9]{1})$|^([1-9]{1})$",message = "Age can be in range of 1-99")
	@NotNull
//	@Min(value =20,message = "Minimum allowed age is 20")
//	@Max(value = 99,message = "Max allowed age is 99")
	@Digits(fraction = 0,integer = 10,message = "add numerical age")
	
	
	@Age
	@Digits(fraction = 0,integer = 10,message = "add numerical age")
	private int age;

//	@Temporal(TemporalType.DATE)
//	private Date dob;
	
	@Temporal(TemporalType.DATE)
	@NotNull(message = "The date of birth is required.")
	@BirthDate(message = "The birth date must be greater or equal than 18")
	@Past(message = "The date of birth must be in the past.")
	private Date dob;
	
	@Pattern(regexp = "^([FEMALE]{6})$|^([female]{6})$|^([MALE]{4})$|^([male]{4})$|^([OTHER]{5})$|^([other]{5})$",message = "Invalid gender,enter eithe all in caps or smalls('FEMALE|female')")
	private String gender;
	@NotEmpty
	@Pattern(regexp = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$",
	message = "Invalid Email,please give like'Anurag.Shukla@gmail.com'")
	private String emailId;
	@Pattern(regexp = "^[789]\\d{9}$",message = "Invalid Mobile no!")
	private String mobileNo;
	private String address;
    @Pattern(regexp = "^[a-zA-Z]{2,20}$",message = "Invalid City Name!")
	private String city;
	@Pattern(regexp = "^[a-zA-Z]{2,20}$",message = "Invalid Country Name!")
	private String country;
	private int pinCode;
	@Pattern(regexp = "^[789]\\d{9}$",message = "Invalid  Alternate Mobile no!")
	private String alternateMobileNo;
	@Pattern(regexp = "^[789]\\d{9}$",message = "Invalid Emergency Mobile no!")
	private String emergencyMobileNo;
	@Pattern(regexp = "^(A|B|AB|O)[+]{1}$|^(A|B|AB|O)[-]{1}$",message = "Please enter proper bloodgrp")
	private String bloodGroup;
	private boolean passport;
	@Pattern(regexp = "^[A-Z]{1}[1-9]{1}[0-9]{6}$",message = "Invalid passport Details,please give like 'A1000234'")
	private String passportDetails;

	private byte[] passportCopy;
	private boolean aadhar;
	@Pattern(regexp = "^\\d{4}\\s\\d{4}\\s\\d{4}$",message = "Invalid Aadhar Details!('2345 3456 4567' please follow this format)")
	private String aadharDetails;

	private byte[] aadharCopy;
	
	private boolean drivingLicense;
//	@Pattern(regexp = "^([A-Z]{2})(\\d{2}|\\d{3})[a-zA-Z]{0,1}(\\d{4})(\\d{7})$\r\n",message = "Invalid Driving Details!")
	
	@Pattern(regexp = "^(([A-Z]{2}[0-9]{2})( )|([A-Z]{2}-[0-9]{2}))((19|20)[0-9][0-9])[0-9]{7}$",message = "Invalid Driving Details,please give either 'HR-0619850034761' or 'UP14 20160034761'")
	private String drivingLicenseDetails;
    
	private byte[] drivingLicenseCopy;
   
    @Pattern(regexp = "^([UNMARRIED]{9})$|^([unmarried]{9})$|^([MARRIED]{7})$|^([married]{7})$",message = "Invalid status,give all in caps or smalls")
	private String maritalStatus;
    @Pattern(regexp = "^[a-zA-Z]{2,20}$",message = "Invalid Work Location!")
    private String workLocation;
	
	

	
	
	
	
	

}
