package com.spring.employee.trial.utils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.spring.employee.trial.controllers.Personal_Controller;
import com.spring.employee.trial.payloads.PersonalDTO;

public class File_Encoder_Decoder {

	private ObjectMapper mapper;
	private org.slf4j.Logger logger = LoggerFactory.getLogger(Personal_Controller.class);

	// tried way 1:Opening Here:
	
//	public PersonalDTO encoder(PersonalDTO personalDetails, MultipartFile[] files) throws IOException {
//
//		this.logger.info("Add user request");
//		logger.info("personalDetail:{}", personalDetails);
//
//		String fileType = null;
//		for (MultipartFile file : files) {
//			fileType = file.getOriginalFilename();
//			if (fileType.equalsIgnoreCase("aadharcard1003.pdf")) {
////		if(fileType.equalsIgnoreCase("MicrosoftTeams-image.png")) {
//
//				personalDetails.setAadharCopy(java.util.Base64.getEncoder().encode(file.getBytes()));
////			
//			} else if (fileType.equalsIgnoreCase("Anurag_ pancard.pdf")) {
//
//				personalDetails.setDrivingLicenseCopy(java.util.Base64.getEncoder().encode(file.getBytes()));
//
//			} else if (fileType.equalsIgnoreCase("anurag_passport.pdf")) {
//
//				personalDetails.setPassportCopy(java.util.Base64.getEncoder().encode(file.getBytes()));
//
//			}
//		}
//
//		return personalDetails;
//	}
//
//	public PersonalDTO decoder(PersonalDTO personalDetails) throws IOException {
//
//		this.logger.info("Add user request");
//		logger.info("personalDetail:{}", personalDetails);
//
//		personalDetails.setAadharCopy(java.util.Base64.getDecoder().decode(personalDetails.getAadharCopy()));
//		personalDetails
//				.setDrivingLicenseCopy(java.util.Base64.getDecoder().decode(personalDetails.getDrivingLicenseCopy()));
//		personalDetails.setPassportCopy(java.util.Base64.getDecoder().decode(personalDetails.getPassportCopy()));
//
//		return personalDetails;
//	}
//
//	public List<PersonalDTO> decoderAll(List<PersonalDTO> tdo_obj) throws IOException {
//
//		List<PersonalDTO> updatedList = new ArrayList<>();
//		for (int i = 0; i < tdo_obj.size(); i++) {
//			PersonalDTO list_obj = tdo_obj.get(i);
//			PersonalDTO decoded_list = decoder(list_obj);
//
//			updatedList.add(decoded_list);
//		}
//
//		return updatedList;
//
//	}
	
	//// tried way 1:Closing Here:
	
	public PersonalDTO encoder(PersonalDTO personalDetails, MultipartFile[] files) throws IOException {

		this.logger.info("Getting request for Encoding");
		logger.info("personalDetail:{}", personalDetails);

		String fileType = null;
		for (MultipartFile file : files) {
			fileType = file.getOriginalFilename();
			if (fileType.equalsIgnoreCase("aadharcard1003.png")) {


				personalDetails.setAadharCopy(java.util.Base64.getEncoder().encode(file.getBytes()));
//			
			} else if (fileType.equalsIgnoreCase("Anurag_ pancard.jpeg")) {

				personalDetails.setDrivingLicenseCopy(java.util.Base64.getEncoder().encode(file.getBytes()));

			} else if (fileType.equalsIgnoreCase("anurag_passport.jpg")) {

				personalDetails.setPassportCopy(java.util.Base64.getEncoder().encode(file.getBytes()));

			}
		}

		return personalDetails;
	}

	public PersonalDTO decoder(PersonalDTO personalDetails) throws IOException {

//		this.logger.info("Getting request for Decoding");
//		logger.info("personalDetail:{}", personalDetails);

		personalDetails.setAadharCopy(java.util.Base64.getDecoder().decode(personalDetails.getAadharCopy()));
		personalDetails
				.setDrivingLicenseCopy(java.util.Base64.getDecoder().decode(personalDetails.getDrivingLicenseCopy()));
		personalDetails.setPassportCopy(java.util.Base64.getDecoder().decode(personalDetails.getPassportCopy()));

		return personalDetails;
	}

	public List<PersonalDTO> decoderAll(List<PersonalDTO> tdo_obj) throws IOException {

		List<PersonalDTO> updatedList = new ArrayList<>();
		for (int i = 0; i < tdo_obj.size(); i++) {
			PersonalDTO list_obj = tdo_obj.get(i);
			PersonalDTO decoded_list = decoder(list_obj);

			updatedList.add(decoded_list);
		}

		return updatedList;

	}


}
